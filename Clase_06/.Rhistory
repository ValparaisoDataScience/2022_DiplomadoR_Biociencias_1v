head(Peso)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(tidy_data, Especie, Sexo)
# Unir Objetos Peso, Parasitos y Sexo.
sexo <- read_excel("Peces.xlsx", sheet = 2)
head(sexo)
data <- left_join(Peso, Parasitos, "peces")
tidy_data <- left_join(data, sexo, "peces")
head(tidy_data)
# Eliminar y transformar columnas.
tidy_data <- tidy_data[,-4]
colnames(tidy_data)[2] <- "Especie"
tidy_data <- tidy_data[, c(1, 2, 5, 3, 4)]
head(tidy_data)
library(readr)
agronomic_data <- read_csv("agronomic_data.csv")
View(agronomic_data)
# Importar datos reales tidy
agronomic_data <- read_csv("agronomic_data.csv")
View(agronomic_data)
head(agronomic_data)
summary(agronomic_data)
head(agronomic_data)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_dataYear <- as.factor(agronomic_data$Year)
summary(agronomic_data)
agronomic_data$Year <- as.factor(agronomic_data$Year)
summary(agronomic_data)
agronomic_data$Treatment <- as.factor(agronomic_data$Treatment)
summary(agronomic_data)
agronomic_data$Replicate <- as.factor(agronomic_data$Replicate)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
filter(Crop == "Glycine max L. (*)")
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha, na.rm=T),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha, na.rm=T),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha, na.rm=T))
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = yield_bu_A*56*0.453592/0.404686*0.845)
library(readxl)
agronomic_data <- read_excel("agronomic_data.xlsx")
View(agronomic_data)
# Importar datos reales tidy
# https://lter.kbs.msu.edu/datatables/51
agronomic_data <- read_excel("agronomic_data.xlsx")
head(agronomic_data)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$Treatment <- as.factor(agronomic_data$Treatment)
agronomic_data$Replicate <- as.factor(agronomic_data$Replicate)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
filter(Crop == "Glycine max L. (*)")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha))
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max L. (*)")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A),
Maximo_yield = max(yield_bu_A))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, crop_only_yield_kg_ha) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha, na.rm=T),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(crop_only_yield_kg_ha, na.rm=T),
Maximo_yield_kg_ha = max(crop_only_yield_kg_ha, na.rm=T))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = yield_bu_A*56*0.453592/0.404686*0.845)
View(agronomic_data)
# Importar datos reales tidy
# https://lter.kbs.msu.edu/datatables/51
agronomic_data <- read_excel("agronomic_data.xlsx")
head(agronomic_data)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$Treatment <- as.factor(agronomic_data$Treatment)
agronomic_data$Replicate <- as.factor(agronomic_data$Replicate)
summary(agronomic_data)
View(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max L. (*)")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A),
Maximo_yield = max(yield_bu_A))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max L. (*)")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A),
Maximo_yield = max(yield_bu_A))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = yield_bu_A*56*0.453592/0.404686*0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = yield_bu_A*56*0.453592/0.404686/0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.404686)*0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047)*0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047)/0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)*0.4047)/0.845)
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)*0.4047))
agronomic_data  %>% filter(Crop == "Glycine max L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047))
agronomic_data  %>% filter(Crop == "Zea mays L. (*) ") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047))
agronomic_data  %>% filter(Crop == "Zea mays L. (*)") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047))
head(agronomic_data)
agronomic_data <- read_excel("agronomic_data.xlsx", sheet = 1)
head(agronomic_data)
agronomic_data <- read_excel("agronomic_data.xlsx", sheet = 1)
head(agronomic_data)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
head(agronomic_data)
agronomic_dataSample_id <- as.factor(agronomic_dataSample_id)
agronomic_data <- read_excel("agronomic_data.xlsx", sheet = 1)
head(agronomic_data)
agronomic_dataSample_id <- as.factor(agronomic_dataSample_id)
agronomic_dataSample_id <- as.factor(agronomic_data$Sample_id)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
agronomic_data$Sample_id <- as.factor(agronomic_data$Sample_id)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
agronomic_data <- read_excel("agronomic_data.xlsx", sheet = 1)
head(agronomic_data)
agronomic_data$Sample_id <- as.factor(agronomic_data$Sample_id)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
agronomic_data  %>% filter(Crop == "Glycine max L. (*)")
agronomic_data  %>% filter(Crop == "Zea maiz")
agronomic_data  %>% filter(Crop == "Zea mays")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max L. (*)")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A),
Maximo_yield = max(yield_bu_A))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield_kg_ha = mean(yield_bu_A, na.rm=T),
Maximo_yield_kg_ha = max(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = max(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = max(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = sd(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = sd(yield_bu_A, na.rm=T))
agronomic_data  %>% filter(Crop == "Zea mays") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047))
agronomic_data  %>% filter(Crop == "Zea mays") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047)*0.845)
agro_tab <- agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = sd(yield_bu_A, na.rm=T))
View(agro_tab)
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
agro_tab <- agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
View(agro_tab)
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
mean_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
agro_tab <- agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
mean_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = sd(yield_bu_A, na.rm=T))
View(agro_tab)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como mean / sd * 100
agro_tab %>% mutate(CV_yield = mean_yield/sd_yield*100)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como mean / sd * 100
agro_tab %>% mutate(CV_yield = (sd_yield/mean_yield)*100))
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como mean / sd * 100
agro_tab %>% mutate(CV_yield = (sd_yield/mean_yield)*100)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
agro_tab %>% mutate(CV_yield = (sd_yield/mean_yield*100)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
agro_tab %>% mutate(CV_yield = sd_yield/mean_yield*100)
agronomic_data  %>% filter(Crop == "Zea mays") %>%
mutate(yield_kg_ha = ((yield_bu_A*56*0.4536)/0.4047)*0.845)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
agro_tab %>% mutate(CV_yield = sd_yield/mean_yield*100)
# JOINING DATA.FRAME
agronomic_factor <- read_excel("agronomic_data.xlsx", sheet = 2)
View(agronomic_factor)
# JOINING DATA.FRAME
agronomic_factor <- read_excel("agronomic_data.xlsx", sheet = 2)
agronomic_factor$Treatment <- as.factor(agronomic_factor$Treatment)
agronomic_factor$Replicate <- as.factor(agronomic_factor$Replicate)
summary(agronomic_factor)
agronomic_factor$Date <- as.date(agronomic_factor$Date)
# JOINING DATA.FRAME
agronomic_factor <- read_excel("agronomic_data.xlsx", sheet = 2)
agronomic_factor$Treatment <- as.factor(agronomic_factor$Treatment)
agronomic_factor$Replicate <- as.factor(agronomic_factor$Replicate)
summary(agronomic_factor)
inner_join(agronomic_data, agronomic_factor, "Sample_id")
in_data <- inner_join(agronomic_data, agronomic_factor, "Sample_id")
View(in_data)
left_data <- left_join(agronomic_data, agronomic_factor, "Sample_id")
View(left_data)
right_data <- right_join(agronomic_data, agronomic_factor, "Sample_id")
View(right_data)
full_data <- full_join(agronomic_data, agronomic_factor, "Sample_id")
View(full_data)
# JOINING DATA.FRAME
agronomic_factor <- read_excel("agronomic_data.xlsx", sheet = 2)
agronomic_factor$Treatment <- as.factor(agronomic_factor$Treatment)
agronomic_factor$Replicate <- as.factor(agronomic_factor$Replicate)
# Habilita librerías
library(readxl) # Para importar datos desde excel a R
library(tidyr) # Para manipular datos
library(dplyr) # Para manipular datos
library(ggplot2) # Para hacer gráficos
x <- rnorm(5)
y <- rnorm(5)
dat <- data.frame(x,y)
dat
max(dat)
dat %>% max
dat %>% arrange(y) # Ordena filas de un data.frame por el valor de alguna columna
# Importar messy datos
messy <- read_excel("Peces.xlsx") # Carga el set de datos
summary(messy)
# Importar messy datos con datos faltantes
messy <- read_excel("Peces.xlsx", na="NA")
summary(messy)
head(messy)  # Muestra los primeros datos del data set
# Filtrar variable peso con tubería
messy %>% filter(Variable == "peso")
# Colapsar columna Especie
messy %>% filter(Variable == "peso") %>% gather("Especie","Peso",3:5)
# Crear objeto Peso
Peso <- messy %>% filter(Variable == "peso") %>% gather("Especie","Peso",3:5)
# Eliminar columna "variable" y renombrar variable réplica.
Peso <- Peso[,-1]
colnames(Peso)[1] <- "peces"
Peso$peces <- c(1:9)
head(Peso)
agronomic_data <- read_excel("agronomic_data.xlsx", sheet = 1)
head(agronomic_data)
agronomic_data$Sample_id <- as.factor(agronomic_data$Sample_id)
agronomic_data$Crop <- as.factor(agronomic_data$Crop)
agronomic_data$Year <- as.factor(agronomic_data$Year)
agronomic_data$yield_bu_A <- as.numeric(agronomic_data$yield_bu_A)
summary(agronomic_data)
# FUNCIÓN SELECT()
# Permite extraer o seleccionar variables/columnas específicas de un data.frame.
select(agronomic_data, Crop, Year)
# FUNCIÓN SELECT() CON PIPE
agronomic_data %>% select(Crop, Year)
# FUNCIÓN FILTER() CON PIPE
# **filter()**: Para filtrar desde una tabla de datos un subconjunto de filas.
# Ej. solo un nivel de de un factor, observaciones que cumplen algún criterio (ej. > 20).
agronomic_data  %>% filter(Crop == "Glycine max")
agronomic_data  %>% filter(Crop == "Zea mays")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
filter(Crop == "Glycine max")
# FUNCIÓN SUMMARIZE()
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A),
Maximo_yield = max(yield_bu_A))
# FUNCIÓN SUMMARIZE() removiendo NA antes de calcular
agronomic_data %>% select(Crop, Year, yield_bu_A) %>%
summarize(n = n(),
Promedio_yield = mean(yield_bu_A, na.rm=T),
Maximo_yield = sd(yield_bu_A, na.rm=T))
# FUNCIÓN SUMMARIZE() + GROUP_BY()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
mean_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
agro_tab <- agronomic_data %>% group_by(Crop) %>%
summarize(n = n(),
mean_yield = mean(yield_bu_A, na.rm=T),
sd_yield = sd(yield_bu_A, na.rm=T))
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
agro_tab %>% mutate(CV_yield = sd_yield/mean_yield*100)
# JOINING DATA.FRAME
agronomic_factor <- read_excel("agronomic_data.xlsx", sheet = 2)
agronomic_factor$Treatment <- as.factor(agronomic_factor$Treatment)
agronomic_factor$Replicate <- as.factor(agronomic_factor$Replicate)
summary(agronomic_factor)
inner_data <- inner_join(agronomic_data, agronomic_factor, "Sample_id")
left_data <- left_join(agronomic_data, agronomic_factor, "Sample_id")
right_data <- right_join(agronomic_data, agronomic_factor, "Sample_id")
full_data <- full_join(agronomic_data, agronomic_factor, "Sample_id")
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(readxl)
library(ggplot2)
library(tidyr)
knitr::include_graphics("tidy_messy.png")
knitr::include_graphics("tidy_messy.png")
knitr::include_graphics("select.png")
knitr::include_graphics("filter.png")
knitr::include_graphics("mutate.png")
knitr::include_graphics("group_by.png")
knitr::include_graphics("group_by.png")
knitr::include_graphics("join.png")
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(readxl)
library(ggplot2)
library(tidyr)
knitr::include_graphics("join.png")
# Habilita librerías
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
detach("package:tidyr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:readxl", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:lubridate", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:dplyr", unload = TRUE)
# Habilita librerías
library(tidyverse)
tidyverse_packages()
knitr::include_graphics("Rdata_science.png")
